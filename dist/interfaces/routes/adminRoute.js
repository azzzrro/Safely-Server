"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const adminController_1 = __importDefault(require("../controllers/adminController/adminController"));
const auth_1 = __importDefault(require("../../middlewares/auth"));
const adminRoute = (0, express_1.Router)();
adminRoute.post('/login', adminController_1.default.adminLogin);
adminRoute.get('/pendingDrivers', auth_1.default.verifyToken, adminController_1.default.pendingDrivers);
adminRoute.get('/driverData', auth_1.default.verifyToken, adminController_1.default.getDriverData);
adminRoute.get('/verifyDriver', auth_1.default.verifyToken, adminController_1.default.verifyDriver);
adminRoute.get('/verifiedDrivers', auth_1.default.verifyToken, adminController_1.default.verifiedDrivers);
adminRoute.get('/blockedDrivers', auth_1.default.verifyToken, adminController_1.default.blockedDrivers);
adminRoute.post('/rejectDriver', auth_1.default.verifyToken, adminController_1.default.rejectDriver);
adminRoute.post('/updateDriverStatus', auth_1.default.verifyToken, adminController_1.default.updateDriverStatus);
adminRoute.get('/verifiedUsers', auth_1.default.verifyToken, adminController_1.default.verifiedUsers);
adminRoute.get('/pendingUsers', auth_1.default.verifyToken, auth_1.default.verifyToken, adminController_1.default.pendingUsers);
adminRoute.get('/blockedUsers', auth_1.default.verifyToken, adminController_1.default.blockedUsesrs);
adminRoute.get('/userData', auth_1.default.verifyToken, adminController_1.default.getUserData);
adminRoute.get('/verifyUser', auth_1.default.verifyToken, adminController_1.default.verifyUser);
adminRoute.post('/rejectUser', auth_1.default.verifyToken, adminController_1.default.rejectUser);
adminRoute.post('/updateUserStatus', auth_1.default.verifyToken, adminController_1.default.updateUserStatus);
adminRoute.get('/getDashboardData', auth_1.default.verifyToken, adminController_1.default.dashboardData);
adminRoute.get('/driverFeedbacks', auth_1.default.verifyToken, adminController_1.default.feedbacks);
adminRoute.get('/getDriverRides', auth_1.default.verifyToken, adminController_1.default.getDriverRides);
exports.default = adminRoute;
